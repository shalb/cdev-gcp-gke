{{- $get_kubeconfig_cmd := print "export KUBECONFIG=./kubeconfig && gcloud auth login --cred-file="  (reqEnv "GCLOUD_CRED_FILE") " && gcloud container clusters get-credentials .name " }}
name: gcp-k8s
kind: InfraTemplate
modules:
  -
    name: vpc
    type: terraform
    source: terraform-google-modules/network/google
    version: "~> 3.0"
    inputs:
      name: {{ .name }}
      region: {{ .variables.region }}
      vpc_id: {{ .variables.vpc }}
  -
    name: k8s
    type: terraform
    source: terraform-google-modules/kubernetes-engine/google
    version: "17.1.0"
    inputs:
      cluster_name: {{ .name }}
      region: {{ .variables.region }}
      vpc_id: {{ remoteState "this.vpc.vpc_id" }}
      k8s_version: {{ .variables.k8s_version }}
      kubeconfig_bucket: {{ .variables.bucket }}
      default_node_group: {{ insertYAML .variables.main_node_group }}
      {{ if .variables.additional_node_groups }}additional_node_groups: {{  .variables.additional_node_groups | insertYAML }} {{ end }}
  -
    name: cert-manager
    type: helm
    source:
      repository: "https://charts.jetstack.io"
      chart: "cert-manager"
      version: "v1.2.0"
    kubeconfig: ./kubeconfig
    depends_on: this.k8s
    additional_options:
      namespace: "cert-manager"
      create_namespace: true
    pre_hook:
      command: {{ $get_kubeconfig_cmd }}
      on_destroy: true
      on_plan: true
    inputs:
      installCRDs: true
      webhook.enabled: false
      ingressShim.defaultIssuerName: letsencrypt-prod
      ingressShim.defaultIssuerKind: ClusterIssuer
      ingressShim.defaultACMEChallengeType: dns01
      securityContext.enabled: false
  -
    name: cert-manager-issuer
    type: kubernetes
    source: ./cert-manager/
    kubeconfig: ./kubeconfig
    depends_on: this.cert-manager
    pre_hook:
      command: {{ $get_kubeconfig_cmd }}
      on_destroy: true
      on_plan: true
  -
    name: argocd
    type: helm
    source:
      repository: "https://argoproj.github.io/argo-helm"
      chart: "argo-cd"
      version: "2.11.0"
    kubeconfig: ./kubeconfig
    depends_on: this.cert-manager
    additional_options:
      namespace: "argocd"
      create_namespace: true
    pre_hook:
      command: {{ $get_kubeconfig_cmd }}
      on_destroy: true
      on_plan: true
    inputs:
      global.image.tag: v1.8.3
      service.type: LoadBalancer
      server.certificate.enabled: true
      server.certificate.domain: argocd.{{ .variables.domain }}
      server.certificate.issuer.name: letsencrypt-prod
      server.certificate.issuer.kind: ClusterIssuer
      server.ingress.enabled: true
      server.ingress.hosts[0]: argocd.{{ .variables.domain }}
      server.ingress.tls[0].hosts[0]: argocd.{{ .variables.domain }}
      server.ingress.tls[0].secretName: argocd-secret
      server.ingress.annotations.cert-manager\.io/cluster-issuer: letsencrypt-prod
      server.ingress.annotations.kubernetes\.io/ingress.class: nginx
      server.ingress.annotations.kubernetes\.io/tls-acme: "true"
      server.ingress.annotations.nginx\.ingress\.kubernetes\.io/ssl-passthrough: "true"
      server.ingress.annotations.nginx\.ingress\.kubernetes\.io/backend-protocol: "HTTPS"
      server.config.url: https://argocd.{{ .variables.domain }}
      configs.secret.argocdServerAdminPassword: {{ .variables.argo_password }}
      configs.secret.argocdServerAdminPasswordMtime: "2021-01-01T00:00:00Z"
      installCRDs: false
  -
    name: argocd_apps
    provider_version: "0.2.1"
    type: kubernetes
    source: ./argocd/
    kubeconfig: ./kubeconfig
    depends_on: this.argocd
    pre_hook:
      command: {{ $get_kubeconfig_cmd }}
      on_destroy: true
      on_plan: true
  -
    name: print_outputs
    type: printer
    depends_on: this.argocd
    inputs:
      cluster_name: {{ .name }}
      region: {{ .variables.region }}
      kubeconfig: {{ $get_kubeconfig_cmd }}
      argocd_url: https://argocd.{{ .variables.domain }}
